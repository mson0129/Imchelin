"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var XmlElementNames_1 = require("../../XmlElementNames");
var AttachableAttribute_1 = require("../../../Attributes/AttachableAttribute");
var MeetingMessage_1 = require("./MeetingMessage");
/**
 * ## *Not Implemented*
 */
var MeetingRequest = (function (_super) {
    __extends(MeetingRequest, _super);
    function MeetingRequest() {
        _super.apply(this, arguments);
    }
    ////////MeetingRequestType: MeetingRequestType;
    ////////IntendedFreeBusyStatus: LegacyFreeBusyStatus;
    ////////ChangeHighlights: ChangeHighlights;
    ////////EnhancedLocation: EnhancedLocation;
    ////////Start: Date;
    ////////End: Date;
    ////////OriginalStart: Date;
    ////////IsAllDayEvent: boolean;
    ////////LegacyFreeBusyStatus: LegacyFreeBusyStatus;
    ////////Location: string;
    ////////When: string;
    ////////IsMeeting: boolean;
    ////////IsCancelled: boolean;
    ////////IsRecurring: boolean;
    ////////MeetingRequestWasSent: boolean;
    ////////AppointmentType: AppointmentType;
    ////////MyResponseType: MeetingResponseType;
    ////////Organizer: EmailAddress;
    ////////RequiredAttendees: AttendeeCollection;
    ////////OptionalAttendees: AttendeeCollection;
    ////////Resources: AttendeeCollection;
    ////////ConflictingMeetingCount: number;
    ////////AdjacentMeetingCount: number;
    ////////ConflictingMeetings: ItemCollection<Appointment>;
    ////////AdjacentMeetings: ItemCollection<Appointment>;
    ////////Duration: System.TimeSpan;
    ////////TimeZone: string;
    ////////AppointmentReplyTime: Date;
    ////////AppointmentSequenceNumber: number;
    ////////AppointmentState: number;
    ////////Recurrence: Recurrence;
    ////////FirstOccurrence: OccurrenceInfo;
    ////////LastOccurrence: OccurrenceInfo;
    ////////ModifiedOccurrences: OccurrenceInfoCollection;
    ////////DeletedOccurrences: DeletedOccurrenceInfoCollection;
    ////////StartTimeZone: System.TimeZoneInfo;
    ////////EndTimeZone: System.TimeZoneInfo;
    ////////ConferenceType: number;
    ////////AllowNewTimeProposal: boolean;
    ////////IsOnlineMeeting: boolean;
    ////////MeetingWorkspaceUrl: string;
    ////////NetShowUrl: string;
    ////////Accept(sendResponse: boolean): CalendarActionResults { throw new Error("MeetingRequest.ts - Accept : Not implemented."); }
    ////////AcceptTentatively(sendResponse: boolean): CalendarActionResults { throw new Error("MeetingRequest.ts - AcceptTentatively : Not implemented."); }
    ////////Bind(service: ExchangeService, id: ItemId, propertySet: PropertySet): MeetingRequest { throw new Error("MeetingRequest.ts - Bind : Not implemented."); }
    ////////Bind(service: ExchangeService, id: ItemId): MeetingRequest { throw new Error("MeetingRequest.ts - Bind : Not implemented."); }
    ////////CreateAcceptMessage(tentative: boolean): AcceptMeetingInvitationMessage { throw new Error("MeetingRequest.ts - CreateAcceptMessage : Not implemented."); }
    ////////CreateDeclineMessage(): DeclineMeetingInvitationMessage { throw new Error("MeetingRequest.ts - CreateDeclineMessage : Not implemented."); }
    ////////Decline(sendResponse: boolean): CalendarActionResults { throw new Error("MeetingRequest.ts - Decline : Not implemented."); }
    ////////GetMinimumRequiredServerVersion(): ExchangeVersion { throw new Error("MeetingRequest.ts - GetMinimumRequiredServerVersion : Not implemented."); }
    ////////GetSchema(): ServiceObjectSchema { throw new Error("MeetingRequest.ts - GetSchema : Not implemented."); }
    MeetingRequest.prototype.GetXmlElementName = function () { return XmlElementNames_1.XmlElementNames.MeetingRequest; };
    MeetingRequest = __decorate([
        AttachableAttribute_1.AttachableAttribute(true), 
        __metadata('design:paramtypes', [])
    ], MeetingRequest);
    return MeetingRequest;
}(MeetingMessage_1.MeetingMessage));
exports.MeetingRequest = MeetingRequest;
